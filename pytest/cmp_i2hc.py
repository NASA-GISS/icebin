import netCDF4
import giss.basemap
import giss.modele
import matplotlib.pyplot
import numpy as np
import glint2
import giss
import sys
import scipy.sparse

basemap = giss.basemap.greenland_laea()

fhc_nc = 'fhc-00.nc'


# Read a height-points field so we can play with it
nc = netCDF4.Dataset('JUL1950.ijhchc1k225.nc')
vv = nc.variables['impm_lndice']
val1hp = np.zeros(vv.shape)
val1hp[:] = vv[:]
val1hp[np.abs(val1hp)>1e10] = 0
nc.close()

#val1hp[:] = 1.

# Read the matrices
nc = netCDF4.Dataset('i2hc.nc')
i2hc = giss.read_coo_matrix(nc, 'i2hc')
hp2i = giss.read_coo_matrix(nc, 'hp2i')
nc.close()

# This replicates the picture from December AGU
val2 = glint2.coo_multiply(hp2i, val1hp, fill=np.nan)

# --------------------------------
# Now try to get val1hc
val1hc = glint2.coo_multiply(i2hc, val2, fill=np.nan)
val1hc_r = val1hc.reshape(val1hp.shape)

ncout = netCDF4.Dataset('val1hc-py.nc', 'w')
ncout.createDimension('nhc', val1hp.shape[0])
ncout.createDimension('jm', val1hp.shape[1])
ncout.createDimension('im', val1hp.shape[2])
val1hc_v = ncout.createVariable('val1hc', 'd', ('nhc', 'jm', 'im'))
val1hc_v[:] = val1hc
val1hp_v = ncout.createVariable('val1hp', 'd', ('nhc', 'jm', 'im'))
val1hp_v[:] = val1hp

val1hc = val1hc_r - val1hp
diff_v = ncout.createVariable('diff', 'd', ('nhc', 'jm', 'im'))
diff_v[:] = val1hc

# --------------------------------
# Now compute val1hc by pre-multiplying the matrices
# (Gives val1hc_b == valh1c.  Yes, linear algebra works.)

hp2hc = scipy.sparse.coo_matrix(i2hc * hp2i)
print type(hp2hc)
val1hc_b = glint2.coo_multiply(hp2hc, val1hp, fill=np.nan)

val1hc_b_v = ncout.createVariable('val1hc_b', 'd', ('nhc', 'jm', 'im'))
val1hc_b_v[:] = val1hc_b

# --------------------------------
# Now try it from loading the hp2hc matrix generated by GLINT2

nc = netCDF4.Dataset('hp2hc.nc')
hp2hc_c = giss.read_coo_matrix(nc, 'hp2hc')
nc.close()
val1hc_c = glint2.coo_multiply(hp2hc_c, val1hp, fill=np.nan)

val1hc_c_v = ncout.createVariable('val1hc_c', 'd', ('nhc', 'jm', 'im'))
val1hc_c_v[:] = val1hc_c


# --------------------------------
ncout.close()

sys.exit(0)
# --------------------------------

# ==================PLOT
basemap = giss.basemap.greenland_laea()


# ------- Plot1 : val2
pp = {}
pp['var_name'] = 'val2'
pp['val'] = val2
#pp['title'] = "%s:%s" % (nc_name, var_name)
#pp['plot_boundaries'] = _default_plot_boundaries
pp['plotter'] = glint2.Grid_read_plotter('searise.nc', 'grid')

var_name = 'val2'
plot_args = {}
pp['plot_args'] = plot_args
plot_args['norm'] = giss.plot.AsymmetricNormalize()
reverse = True
plot_args['cmap'] = giss.plot.cpt('giss-cpt/BlRe.cpt', reverse=reverse).cmap


giss.plot.plot_var(basemap=basemap, **pp)		# Plot, and show on screen

